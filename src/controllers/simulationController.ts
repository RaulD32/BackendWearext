import { Request, Response } from 'express';
import { whatsAppService } from '../services/whatsappService.js';

class SimulationController {

    /**
     * Simular presi√≥n de bot√≥n del ESP32
     */
    public async simulateButtonPress(req: Request, res: Response): Promise<void> {
        try {
            const { button, category, childName } = req.body;

            // Validaciones
            if (!button || button < 1 || button > 10) {
                res.status(400).json({
                    success: false,
                    message: 'Bot√≥n debe estar entre 1 y 10'
                });
                return;
            }

            if (!category) {
                res.status(400).json({
                    success: false,
                    message: 'Categor√≠a es requerida (puede ser n√∫mero 1-3 o string "B√°sico", "Emociones", "Necesidades")'
                });
                return;
            }

            // Validar categor√≠a
            let validCategory = false;
            if (typeof category === 'number') {
                validCategory = category >= 1 && category <= 3;
            } else if (typeof category === 'string') {
                validCategory = ['B√°sico', 'Emociones', 'Necesidades'].includes(category);
            }

            if (!validCategory) {
                res.status(400).json({
                    success: false,
                    message: 'Categor√≠a debe ser 1-3 (n√∫mero) o "B√°sico", "Emociones", "Necesidades" (string)'
                });
                return;
            }

            // Crear notificaci√≥n simulada
            const notification = {
                button: parseInt(button),
                category: typeof category === 'string' ? category : parseInt(category),
                timestamp: Date.now(),
                childName: childName || 'Simulaci√≥n de Prueba'
            };

            console.log('');
            console.log('üéØ SIMULACI√ìN DE BOT√ìN ESP32:');
            console.log('‚ïê'.repeat(50));
            console.log(`üì± Bot√≥n: ${notification.button}`);
            console.log(`üìÇ Categor√≠a: ${notification.category}`);
            console.log(`üë∂ Ni√±o: ${notification.childName}`);
            console.log(`üïê Timestamp: ${new Date(notification.timestamp).toLocaleString()}`);
            console.log('‚ïê'.repeat(50));

            // Verificar si WhatsApp est√° listo
            if (!whatsAppService.isClientReady()) {
                res.status(400).json({
                    success: false,
                    message: 'WhatsApp no est√° conectado. Inicia WhatsApp primero.',
                    data: {
                        whatsappReady: false,
                        simulation: notification
                    }
                });
                return;
            }

            // Enviar notificaci√≥n de WhatsApp
            await whatsAppService.sendButtonPressNotification(notification);

            res.status(200).json({
                success: true,
                message: 'Simulaci√≥n de bot√≥n ejecutada correctamente',
                data: {
                    notification,
                    whatsappReady: true,
                    timestamp: new Date().toISOString()
                }
            });

        } catch (error: any) {
            console.error('‚ùå Error en simulaci√≥n de bot√≥n:', error);
            res.status(500).json({
                success: false,
                message: 'Error ejecutando simulaci√≥n de bot√≥n',
                error: error.message
            });
        }
    }

    /**
     * Simular alerta de bater√≠a baja
     */
    public async simulateBatteryAlert(req: Request, res: Response): Promise<void> {
        try {
            const { batteryLevel } = req.body;

            const level = parseInt(batteryLevel) || 15;

            console.log('');
            console.log('üîã SIMULACI√ìN DE BATER√çA BAJA:');
            console.log('‚ïê'.repeat(50));
            console.log(`üîã Nivel: ${level}%`);
            console.log('‚ïê'.repeat(50));

            if (!whatsAppService.isClientReady()) {
                res.status(400).json({
                    success: false,
                    message: 'WhatsApp no est√° conectado. Inicia WhatsApp primero.',
                    data: {
                        whatsappReady: false,
                        batteryLevel: level
                    }
                });
                return;
            }

            await whatsAppService.sendBatteryAlert(level);

            res.status(200).json({
                success: true,
                message: 'Simulaci√≥n de bater√≠a ejecutada correctamente',
                data: {
                    batteryLevel: level,
                    whatsappReady: true,
                    timestamp: new Date().toISOString()
                }
            });

        } catch (error: any) {
            console.error('‚ùå Error en simulaci√≥n de bater√≠a:', error);
            res.status(500).json({
                success: false,
                message: 'Error ejecutando simulaci√≥n de bater√≠a',
                error: error.message
            });
        }
    }

    /**
     * Simular desconexi√≥n del dispositivo
     */
    public async simulateDeviceDisconnection(req: Request, res: Response): Promise<void> {
        try {
            console.log('');
            console.log('üîå SIMULACI√ìN DE DESCONEXI√ìN:');
            console.log('‚ïê'.repeat(50));
            console.log('üì± Dispositivo ESP32 desconectado');
            console.log('‚ïê'.repeat(50));

            if (!whatsAppService.isClientReady()) {
                res.status(400).json({
                    success: false,
                    message: 'WhatsApp no est√° conectado. Inicia WhatsApp primero.',
                    data: {
                        whatsappReady: false
                    }
                });
                return;
            }

            await whatsAppService.sendDisconnectionAlert();

            res.status(200).json({
                success: true,
                message: 'Simulaci√≥n de desconexi√≥n ejecutada correctamente',
                data: {
                    whatsappReady: true,
                    timestamp: new Date().toISOString()
                }
            });

        } catch (error: any) {
            console.error('‚ùå Error en simulaci√≥n de desconexi√≥n:', error);
            res.status(500).json({
                success: false,
                message: 'Error ejecutando simulaci√≥n de desconexi√≥n',
                error: error.message
            });
        }
    }

    /**
     * Simular reconexi√≥n del dispositivo
     */
    public async simulateDeviceReconnection(req: Request, res: Response): Promise<void> {
        try {
            console.log('');
            console.log('‚úÖ SIMULACI√ìN DE RECONEXI√ìN:');
            console.log('‚ïê'.repeat(50));
            console.log('üì± Dispositivo ESP32 reconectado');
            console.log('‚ïê'.repeat(50));

            if (!whatsAppService.isClientReady()) {
                res.status(400).json({
                    success: false,
                    message: 'WhatsApp no est√° conectado. Inicia WhatsApp primero.',
                    data: {
                        whatsappReady: false
                    }
                });
                return;
            }

            await whatsAppService.sendReconnectionAlert();

            res.status(200).json({
                success: true,
                message: 'Simulaci√≥n de reconexi√≥n ejecutada correctamente',
                data: {
                    whatsappReady: true,
                    timestamp: new Date().toISOString()
                }
            });

        } catch (error: any) {
            console.error('‚ùå Error en simulaci√≥n de reconexi√≥n:', error);
            res.status(500).json({
                success: false,
                message: 'Error ejecutando simulaci√≥n de reconexi√≥n',
                error: error.message
            });
        }
    }

    /**
     * Ejecutar bater√≠a de pruebas completa
     */
    public async runFullSimulation(req: Request, res: Response): Promise<void> {
        try {
            console.log('');
            console.log('üöÄ INICIANDO SIMULACI√ìN COMPLETA:');
            console.log('‚ïê'.repeat(60));

            if (!whatsAppService.isClientReady()) {
                res.status(400).json({
                    success: false,
                    message: 'WhatsApp no est√° conectado. Inicia WhatsApp primero.'
                });
                return;
            }

            const results = [];

            // 1. Simular varios botones presionados con nuevas categor√≠as
            const buttons = [
                { button: 1, category: 'B√°sico', childName: 'Ana' },
                { button: 3, category: 'Emociones', childName: 'Luis' },
                { button: 5, category: 'Necesidades', childName: 'Mar√≠a' },
                { button: 2, category: 1, childName: 'Diego' }, // Categor√≠a num√©rica
                { button: 4, category: 2, childName: 'Sof√≠a' }  // Categor√≠a num√©rica
            ];

            for (const btnData of buttons) {
                console.log(`üì± Enviando simulaci√≥n bot√≥n ${btnData.button}...`);
                await whatsAppService.sendButtonPressNotification({
                    ...btnData,
                    timestamp: Date.now()
                });
                results.push(`Bot√≥n ${btnData.button} - Categor√≠a ${btnData.category}`);

                // Esperar 2 segundos entre mensajes
                await new Promise(resolve => setTimeout(resolve, 2000));
            }

            // 2. Simular alerta de bater√≠a
            console.log('üîã Enviando alerta de bater√≠a...');
            await whatsAppService.sendBatteryAlert(15);
            results.push('Alerta de bater√≠a 15%');

            console.log('‚úÖ SIMULACI√ìN COMPLETA FINALIZADA');
            console.log('‚ïê'.repeat(60));

            res.status(200).json({
                success: true,
                message: 'Simulaci√≥n completa ejecutada correctamente',
                data: {
                    testsExecuted: results,
                    totalTests: results.length,
                    timestamp: new Date().toISOString()
                }
            });

        } catch (error: any) {
            console.error('‚ùå Error en simulaci√≥n completa:', error);
            res.status(500).json({
                success: false,
                message: 'Error ejecutando simulaci√≥n completa',
                error: error.message
            });
        }
    }

    /**
     * Simular cambio de estado del sistema ESP32
     */
    public async simulateSystemStateChange(req: Request, res: Response): Promise<void> {
        try {
            const { previousState, currentState } = req.body;

            console.log('');
            console.log('üîÑ SIMULACI√ìN DE CAMBIO DE ESTADO:');
            console.log('‚ïê'.repeat(50));
            console.log(`üìä Estado anterior: ${previousState || 'IDLE'}`);
            console.log(`üìä Estado actual: ${currentState || 'ACTIVE'}`);
            console.log('‚ïê'.repeat(50));

            res.status(200).json({
                success: true,
                message: 'Simulaci√≥n de cambio de estado ejecutada',
                data: {
                    previousState: previousState || 'IDLE',
                    currentState: currentState || 'ACTIVE',
                    timestamp: new Date().toISOString()
                }
            });

        } catch (error: any) {
            console.error('‚ùå Error en simulaci√≥n de cambio de estado:', error);
            res.status(500).json({
                success: false,
                message: 'Error ejecutando simulaci√≥n de cambio de estado',
                error: error.message
            });
        }
    }

    /**
     * Simular despertar del ESP32
     */
    public async simulateWakeUp(req: Request, res: Response): Promise<void> {
        try {
            const { wakeReason } = req.body;

            console.log('');
            console.log('üåÖ SIMULACI√ìN DE DESPERTAR ESP32:');
            console.log('‚ïê'.repeat(50));
            console.log(`üîç Raz√≥n: ${wakeReason || 'button_press'}`);
            console.log('‚ïê'.repeat(50));

            if (whatsAppService.isClientReady()) {
                await whatsAppService.sendReconnectionAlert();
                console.log('‚úÖ Notificaci√≥n de reconexi√≥n enviada por WhatsApp');
            }

            res.status(200).json({
                success: true,
                message: 'Simulaci√≥n de despertar ejecutada correctamente',
                data: {
                    wakeReason: wakeReason || 'button_press',
                    whatsappNotification: whatsAppService.isClientReady(),
                    timestamp: new Date().toISOString()
                }
            });

        } catch (error: any) {
            console.error('‚ùå Error en simulaci√≥n de despertar:', error);
            res.status(500).json({
                success: false,
                message: 'Error ejecutando simulaci√≥n de despertar',
                error: error.message
            });
        }
    }

    /**
     * Simular entrada en modo sue√±o del ESP32
     */
    public async simulateGoToSleep(req: Request, res: Response): Promise<void> {
        try {
            const { sleepReason, duration } = req.body;

            console.log('');
            console.log('üò¥ SIMULACI√ìN DE MODO SUE√ëO ESP32:');
            console.log('‚ïê'.repeat(50));
            console.log(`üîç Raz√≥n: ${sleepReason || 'inactivity'}`);
            console.log(`‚è±Ô∏è Duraci√≥n: ${duration || 'indefinida'}`);
            console.log('‚ïê'.repeat(50));

            res.status(200).json({
                success: true,
                message: 'Simulaci√≥n de modo sue√±o ejecutada correctamente',
                data: {
                    sleepReason: sleepReason || 'inactivity',
                    duration: duration || null,
                    timestamp: new Date().toISOString()
                }
            });

        } catch (error: any) {
            console.error('‚ùå Error en simulaci√≥n de modo sue√±o:', error);
            res.status(500).json({
                success: false,
                message: 'Error ejecutando simulaci√≥n de modo sue√±o',
                error: error.message
            });
        }
    }

    /**
     * Simular mensaje de log del ESP32
     */
    public async simulateLogMessage(req: Request, res: Response): Promise<void> {
        try {
            const { logLevel, message, functionName, lineNumber } = req.body;

            console.log('');
            console.log('üìã SIMULACI√ìN DE LOG ESP32:');
            console.log('‚ïê'.repeat(50));
            console.log(`üìä Nivel: ${logLevel || 'INFO'}`);
            console.log(`üí¨ Mensaje: ${message || 'Mensaje de prueba'}`);
            if (functionName) console.log(`üìç Funci√≥n: ${functionName}:${lineNumber || 0}`);
            console.log('‚ïê'.repeat(50));

            res.status(200).json({
                success: true,
                message: 'Simulaci√≥n de log ejecutada correctamente',
                data: {
                    logLevel: logLevel || 'INFO',
                    message: message || 'Mensaje de prueba',
                    functionName: functionName || null,
                    lineNumber: lineNumber || null,
                    timestamp: new Date().toISOString()
                }
            });

        } catch (error: any) {
            console.error('‚ùå Error en simulaci√≥n de log:', error);
            res.status(500).json({
                success: false,
                message: 'Error ejecutando simulaci√≥n de log',
                error: error.message
            });
        }
    }

    /**
     * Simular comando de cambio de categor√≠a desde m√≥vil
     */
    public async simulateCategoryCommand(req: Request, res: Response): Promise<void> {
        try {
            const { category } = req.body;

            console.log('');
            console.log('üìÅ SIMULACI√ìN DE COMANDO CAMBIO CATEGOR√çA:');
            console.log('‚ïê'.repeat(50));
            console.log(`üìä Nueva categor√≠a: ${category || 2}`);
            console.log('‚ïê'.repeat(50));

            // Simular que el comando fue enviado y el ESP32 responde
            setTimeout(() => {
                console.log('üìÅ ESP32 simulado confirm√≥ cambio de categor√≠a');
            }, 1000);

            res.status(200).json({
                success: true,
                message: 'Simulaci√≥n de comando de categor√≠a ejecutada',
                data: {
                    category: category || 2,
                    command: 'change_category',
                    timestamp: new Date().toISOString()
                }
            });

        } catch (error: any) {
            console.error('‚ùå Error en simulaci√≥n de comando de categor√≠a:', error);
            res.status(500).json({
                success: false,
                message: 'Error ejecutando simulaci√≥n de comando de categor√≠a',
                error: error.message
            });
        }
    }

    /**
     * Simular comando de apagado desde m√≥vil
     */
    public async simulateShutdownCommand(req: Request, res: Response): Promise<void> {
        try {
            console.log('');
            console.log('üò¥ SIMULACI√ìN DE COMANDO APAGADO:');
            console.log('‚ïê'.repeat(50));
            console.log('üì± Comando de apagado enviado desde m√≥vil');
            console.log('‚ïê'.repeat(50));

            if (whatsAppService.isClientReady()) {
                // Simular notificaci√≥n de apagado
                console.log('üì§ Enviando notificaci√≥n de apagado por WhatsApp...');
            }

            res.status(200).json({
                success: true,
                message: 'Simulaci√≥n de comando de apagado ejecutada',
                data: {
                    command: 'shutdown',
                    whatsappNotification: whatsAppService.isClientReady(),
                    timestamp: new Date().toISOString()
                }
            });

        } catch (error: any) {
            console.error('‚ùå Error en simulaci√≥n de comando de apagado:', error);
            res.status(500).json({
                success: false,
                message: 'Error ejecutando simulaci√≥n de comando de apagado',
                error: error.message
            });
        }
    }
}

export const simulationController = new SimulationController();
